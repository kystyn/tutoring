#include <iostream>

using namespace std;

// struct - по умолчанию модификатор доступа public
// class - private

// конструктор - метод класса, вызывающийся при его инициализации
// деструктор - метод класса, вызывающийся при освобождении памяти из-под него

// область жизни переменной:
// если выделена на куче - между вызовами new и delete
// если выделена в статической области памяти - от объявления переменной до }

// вообще говоря, деструктор есть смысл писать, лишь только если надо освобождать память

// если не объявлено иного, то всегда существует конструктор по умолчанию с  void - списком аргументов
// если объявлен конструктор не по умолчанию, то конструктора по умолчанию больше нет. Его надо, если требуется,
// прописывать руками

// всегда существует деструктор по умолчанию
// он вызывает деструкторы полей класса
// при перегрузке деструктора не надо руками вызывать деструкторы полей класса. Они всё равно вызовутся

// перегрузка - реализация функций с одним именем и разным списком аргументов
// нельзя перегружать функции, которые отличаются ТОЛЬКО типом возвращаемого значения
// неважно, как называется аргумент. важно, какой у него тип
// полиморфизм - существование нескольких форм

// explicit конструктор нужен, чтобы потребовать от программиста явного вызова конкретной перегрузки конструктора




int main()
{
    student
            s(false),
            v = student(true),
            w(1);

    return 0;
}
